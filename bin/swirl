#!/usr/bin/env node
/*global console*/

var unexpected = require('unexpected'),
    commandLineOptions = require('optimist')
    .usage('$0 [--verbose] [-X <method>] [-H <header>] url [expectations...]')
    .option('header', {
        alias: 'H',
        type: 'string'
    })
    .option('upload-file', {
        alias: 'T',
        type: 'string'
    })
    .option('data', {
        alias: ['d', 'data-ascii'],
        type: 'string'
    })
    .option('method', {
        alias: 'X',
        type: 'string'
    })
    .option('cookie', {
        alias: 'b',
        type: 'string'
    })
    .option('verbose', {
        alias: 'v',
        type: 'boolean'
    })
    .option('silent', {
        alias: 's',
        type: 'boolean'
    })
    .demand(1)
    .argv;

var unexpectedHttp = require('unexpected-http'),
    messy = unexpectedHttp.messy,
    fs = require('fs'),
    expect = unexpected.installPlugin(unexpectedHttp);
expect.output.installPlugin(require('magicpen-prism'));

var url = commandLineOptions._.shift();
if (!/^https?:/.test(url)) {
    url = 'http://' + url;
}

var requestProperties = {url: url};

if (commandLineOptions.method) {
    requestProperties.method = commandLineOptions.method;
}

var requestHeaders = new messy.Headers();

if (commandLineOptions.header) {
    (Array.isArray(commandLineOptions.header) ? commandLineOptions.header : [commandLineOptions.header]).forEach(function (header) {
        var matchKeyValue = header.match(/^([^:]*):\s?(.*)$/);
        if (matchKeyValue) {
            requestHeaders.set(matchKeyValue[1], matchKeyValue[2]);
        } else {
            console.error('Cannot parse header: ' + header);
        }
    });
}

if (commandLineOptions.cookie) {
    requestHeaders.set('Cookie', commandLineOptions.cookie);
}

var expectedResponseProperties;
if (commandLineOptions._.length === 1 && typeof commandLineOptions._[0] === 'number') {
    expectedResponseProperties = commandLineOptions._[0];
} else if (commandLineOptions._.length > 0) {
    /*jshint evil:true*/
    expectedResponseProperties = eval('({' + commandLineOptions._.join(',') + '})');
    /*jshint evil:false*/
} else {
    expectedResponseProperties = {
        statusCode: expect.it('to be within', 200, 299)
    };
}

if (commandLineOptions.data) {
    requestProperties.method = requestProperties.method || 'POST';
    if (!requestHeaders.has('Content-Type')) {
        requestHeaders.set('Content-Type', 'application/x-www-form-urlencoded');
    }

    requestProperties.body = (Array.isArray(commandLineOptions.data) ? commandLineOptions.data : [commandLineOptions.data]).map(function (data) {
        if (/^@/.test(data)) {
            return fs.readFileSync(data.substr(1), 'utf-8').replace(/\r|\n/g, '');
        } else {
            return data;
        }
    }).join('&');
}

var uploadFile = commandLineOptions['upload-file'];
if (uploadFile) {
    if (uploadFile === '.' || uploadFile === '-') {
        var chunks = [];
        process.stdin.on('data', function (chunk) {
            chunks.push(chunk);
        }).on('end', function () {
            requestProperties.body = Buffer.concat(chunks);
            performRequest();
        });
    } else {
        requestProperties.body = fs.readFileSync(uploadFile);
        performRequest();
    }
} else {
    performRequest();
}

function performRequest() {
    if (requestHeaders.toString() !== '') {
        requestProperties.headers = requestHeaders;
    }
    expect(requestProperties, 'to yield response', expectedResponseProperties, function (err, context) {
        var outputFormat = unexpected.outputFormat();
        if (err) {
            if (!commandLineOptions.silent) {
                if (!err._isUnexpected) {
                    console.log(
                        unexpected.inspect(context.httpRequest.requestLine).toString(outputFormat)
                    );
                }
                console.error(err.message);
            }
            process.exit(1);
        } else {
            if (commandLineOptions.verbose) {
                console.log(unexpected.inspect(context.httpExchange).toString(outputFormat));
            } else if (!commandLineOptions.silent) {
                console.log(
                    unexpected.inspect(context.httpExchange.request.requestLine).toString(outputFormat) + ' => ' +
                    unexpected.inspect(context.httpExchange.response.statusLine).toString(outputFormat)
                );
            }
            process.exit(0);
        }
    });
}
