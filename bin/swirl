#!/usr/bin/env node
/*global console*/

var unexpected = require('unexpected'),
    urlModule = require('url'),
    pathModule = require('path'),
    commandLineOptions = require('optimist')
    .usage('$0 [--verbose] [-X <method>] [-H <header>] url [expectations...]')
    .option('header', {
        alias: 'H',
        type: 'string'
    })
    .option('upload-file', {
        alias: 'T',
        type: 'string'
    })
    .option('data', {
        alias: ['d', 'data-ascii'],
        type: 'string'
    })
    .option('method', {
        alias: 'X',
        type: 'string'
    })
    .option('cookie', {
        alias: 'b',
        type: 'string'
    })
    .option('verbose', {
        alias: 'v',
        type: 'boolean'
    })
    .option('silent', {
        alias: 's',
        type: 'boolean'
    })
    .option('cert', {
        type: 'string'
    })
    .option('key', {
        type: 'string'
    })
    .option('cacert', {
        type: 'string'
    })
    .option('insecure', {
        alias: 'k',
        type: 'boolean'
    })
    .option('html', {
        type: 'boolean'
    })
    .option('plugin', {
        type: 'string'
    })
    .demand(1)
    .argv;

var unexpectedHttp = require('unexpected-http'),
    messy = unexpectedHttp.messy,
    fs = require('fs'),
    expect = unexpected.installPlugin(unexpectedHttp);
expect.output.installPlugin(require('magicpen-prism'));

var url = commandLineOptions._.shift();
if (!/^https?:/.test(url)) {
    url = 'http://' + url;
}

var requestProperties = {url: url};

if (commandLineOptions.method) {
    requestProperties.method = commandLineOptions.method;
}

var requestHeaders = new messy.Headers();

if (commandLineOptions.header) {
    (Array.isArray(commandLineOptions.header) ? commandLineOptions.header : [commandLineOptions.header]).forEach(function (header) {
        var matchKeyValue = header.match(/^([^:]*):\s?(.*)$/);
        if (matchKeyValue) {
            requestHeaders.set(matchKeyValue[1], matchKeyValue[2]);
        } else {
            console.error('Cannot parse header: ' + header);
        }
    });
}

if (commandLineOptions.cert) {
    requestProperties.cert = fs.readFileSync(commandLineOptions.cert);
}
if (commandLineOptions.key) {
    requestProperties.key = fs.readFileSync(commandLineOptions.key);
}
if (commandLineOptions.cacert) {
    requestProperties.ca = fs.readFileSync(commandLineOptions.cacert);
}

if (commandLineOptions.cookie) {
    requestHeaders.set('Cookie', commandLineOptions.cookie);
}

var expectedResponseProperties;
if (commandLineOptions._.length === 1 && typeof commandLineOptions._[0] === 'number') {
    expectedResponseProperties = commandLineOptions._[0];
} else if (commandLineOptions._.length > 0) {
    /*jshint evil:true*/
    expectedResponseProperties = eval('({' + commandLineOptions._.map(function (commandLineOption) {
        if (typeof commandLineOption === 'number') {
            return 'statusLine:' + commandLineOption;
        } else if (/^\d+\.\.\d+$/.test(commandLineOption)) {
            var endpoints = commandLineOption.split('..').map(function (str) {
                return parseInt(str, 10);
            });
            return "statusLine: expect.it('to be within', " + endpoints[0] + ', ' + endpoints[1] + ')';
        } else {
            return commandLineOption;
        }
    }).join(',') + '})');
    /*jshint evil:false*/
} else {
    expectedResponseProperties = {
        statusLine: expect.it('to be within', 200, 299)
    };
}

if (typeof commandLineOptions.plugin !== 'undefined') {
    (Array.isArray(commandLineOptions.plugin) ? commandLineOptions.plugin : [commandLineOptions.plugin]).forEach(function (pluginName) {
        if (/^[\.\/]/.test(pluginName)) {
            pluginName = pathModule.resolve(process.cwd(), pluginName);
        }
        expect.installPlugin(require(pluginName));
    });
}

if (commandLineOptions.data) {
    requestProperties.method = requestProperties.method || 'POST';
    if (!requestHeaders.has('Content-Type')) {
        requestHeaders.set('Content-Type', 'application/x-www-form-urlencoded');
    }

    requestProperties.body = (Array.isArray(commandLineOptions.data) ? commandLineOptions.data : [commandLineOptions.data]).map(function (data) {
        if (/^@/.test(data)) {
            return fs.readFileSync(data.substr(1), 'utf-8').replace(/\r|\n/g, '');
        } else {
            return data;
        }
    }).join('&');
}

if (commandLineOptions.insecure) {
    requestProperties.rejectUnauthorized = false;
}

var uploadFile = commandLineOptions['upload-file'];
if (uploadFile) {
    if (uploadFile === '.' || uploadFile === '-') {
        var chunks = [];
        process.stdin.on('data', function (chunk) {
            chunks.push(chunk);
        }).on('end', function () {
            requestProperties.body = Buffer.concat(chunks);
            performRequest();
        });
    } else {
        requestProperties.body = fs.readFileSync(uploadFile);
        performRequest();
    }
} else {
    performRequest();
}

var styleByFragmentName = {
    protocol: 'white',
    slashes: 'gray',
    auth: 'white',
    hostname: 'cyan',
    port: 'gray',
    pathname: 'white',
    search: 'green',
    hash: 'cyan'
};

unexpected.output.addStyle('url', function (url) {
    var urlObj = urlModule.parse(url);
    if (urlObj) {
        ['protocol', 'slashes', 'auth', 'hostname', 'port', 'pathname', 'search', 'hash'].forEach(function (fragmentName) {
            var value = urlObj[fragmentName];
            if (fragmentName === 'port' && value) {
                this.white(':');
            } else if (fragmentName === 'slashes') {
                value = value && '//';
            }
            if (value) {
                this[styleByFragmentName[fragmentName]](value);
            }
        }, this);
    }
});

function performRequest() {
    if (requestHeaders.toString() !== '') {
        requestProperties.headers = requestHeaders;
    }
    expect(requestProperties, 'to yield response', expectedResponseProperties).then(function (context) {
        var outputFormat = unexpected.outputFormat();
        if (commandLineOptions.html) {
            outputFormat = 'html';
        }
        if (commandLineOptions.verbose) {
            console.log(unexpected.inspect(context.httpExchange, Infinity).toString(outputFormat));
        } else if (!commandLineOptions.silent) {
            console.log(
                unexpected.output.clone()
                    .append(unexpected.inspect(new messy.RequestLine({method: context.httpExchange.request.method || 'GET'})))
                    .sp()
                    .url(url)
                    .sp()
                    .append(unexpected.inspect(new messy.RequestLine({protocol: context.httpExchange.request.protocol || 'HTTP/1.1'})))
                    .sp()
                    .text('=>')
                    .sp()
                    .append(unexpected.inspect(context.httpExchange.response.statusLine))
                    .toString(outputFormat)
            );
        }
        process.exit(0);
    }).caught(function (err) {
        if (!commandLineOptions.silent) {
            var outputFormat = unexpected.outputFormat();
            if (err._isUnexpected) {
                console.error(err.message.replace(/^\n/, ''));
            } else {
                console.error(
                    unexpected.output.clone()
                        // Use messy.RequestLine's colors, but put in the complete url instead of the path:
                        .append(unexpected.inspect(new messy.RequestLine({method: requestProperties.method || 'GET'})))
                        .sp()
                        .url(url)
                        .sp()
                        .append(unexpected.inspect(new messy.RequestLine({protocol: 'HTTP/1.1'})))
                        .sp()
                        .text('=>')
                        .sp()
                        .block(function () {
                            this.error(err.message);
                        })
                        .toString(outputFormat)
                );
            }
        }
        process.exit(1);
    });
}
